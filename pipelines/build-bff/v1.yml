parameters:
  # Gitversion
  - name: gitVersionSpec
    type: string
    default: "5.x"

  # BFF API Build Parameters
  - name: publishProject
    type: string
  - name: buildProject
    type: string
  - name: netCoreVersion
    type: string
    default: "6.0.x"
  - name: buildConfiguration
    type: string
    default: Release

  # BFF API Test Settings
  - name: bff_execute_tests
    type: boolean
    default: false
  - name: bff_test_projects
    type: string
    default: "**/*tests/*.csproj"

  # BFF API Sonarqube Settings
  - name: bff_execute_sonar
    type: boolean
    default: false
  - name: bff_sonar_endpoint_name
    type: string
  - name: bff_sonar_project_key
    type: string
  - name: bff_sonar_project_name
    type: string
    default: ""
  - name: bff_use_sonarcloud
    type: boolean
    default: false
  - name: bff_sonar_cloud_organization
    type: string
    default: ""
  - name: bff_sonar_extra_properties
    type: string
    default: ""

  # UI Build
  - name: ui_source_directory
    type: string
    default: "src/ui"
  - name: ui_code_coverage_file
    type: string
    default: "output/coverage/cobertura-coverage.xml"
  - name: ui_unit_test_file
    type: string
    default: "output/test/junit.xml"

  # UI Sonarqube Settings
  - name: ui_execute_sonar
    type: boolean
    default: false
  - name: ui_sonar_endpoint_name
    type: string
  - name: ui_use_sonarcloud
    type: boolean
    default: false
  - name: ui_sonar_cloud_organization
    type: string
    default: ""
  - name: ui_sonar_config_file
    type: string
    default: "sonar-project.properties"

  # Build Artifact Settings
  - name: artifactName
    type: string

  # Docker Settings
  - name: buildAndPublishDockerImage
    type: boolean
    default: false
  - name: artifactZipName
    type: string
  - name: dockerImageName
    type: string
  - name: imageTagVariableName
    type: string
  - name: containerRegistryName
    type: string
    default: proget_docker
  - name: dockerFilePath
    type: string
    default: $(Build.SourcesDirectory)/Dockerfile.simple

  # Helmfile Config Settings
  - name: updateHelmConfig
    type: boolean
    default: false
  - name: helmfileRepoName
    type: string

  # Hooks
  - name: prebuildSteps
    type: stepList
    default: []
  - name: preTestSteps
    type: stepList
    default: []

variables:
  - name: DOCKER_BUILDKIT
    value: 1

stages:
  - stage: Build
    jobs:
      - job: BuildJob
        workspace:
          clean: all
        pool:
          name: Default
          demands: agent.os -equals Linux
        steps:
          - checkout: self
            fetchDepth: 0
            clean: true
          - task: UseDotNet@2
            displayName: "Use .NET Core sdk"
            inputs:
              packageType: sdk
              version: ${{ parameters.netCoreVersion }}
          - task: gitversion/setup@3
            displayName: Setup GitVersion on Agent
            inputs:
              versionSpec: ${{ parameters.gitVersionSpec }}
          - task: gitversion/execute@3
            displayName: Execute GitVersion to update build number

          - template: ../../step_collections/yarn-build-test/v1.yml
            parameters:
              nodeVersion: "21.4.0"
              zipBuildArtifacts: false
              workingDir: ${{ parameters.ui_source_directory }}
              useYarn2: true
              execute_sonar: ${{ parameters.ui_execute_sonar }}
              sonar_endpoint_name: ${{ parameters.ui_sonar_endpoint_name }}
              use_sonarcloud: ${{ parameters.ui_use_sonarcloud }}
              sonar_cloud_organization: ${{ parameters.ui_sonar_cloud_organization }}
              sonar_config_file: ${{ parameters.ui_sonar_config_file }}
              codeCoverageFile: ${{ parameters.ui_code_coverage_file }}
              unitTestFile: ${{ parameters.ui_unit_test_file }}

          - template: ../../step_collections/dotnet-api-build-steps/v1.yml
            parameters:
              buildProject: ${{ parameters.buildProject }}
              publishProject: ${{ parameters.publishProject }}
              netCoreVersion: ${{ parameters.netCoreVersion }}
              buildConfiguration: ${{ parameters.buildConfiguration }}
              prebuildSteps: ${{ parameters.prebuildSteps }}
              preTestSteps: ${{ parameters.preTestSteps }}
              executeSonar: ${{ parameters.bff_execute_sonar }}
              sonarEndpointName: ${{ parameters.bff_sonar_endpoint_name }}
              sonarProjectKey: ${{ parameters.bff_sonar_project_key }}
              sonarProjectName: ${{ parameters.bff_sonar_project_name }}
              executeTests: ${{ parameters.bff_execute_tests }}
              testProjects: ${{ parameters.bff_test_projects }}
              useSonarCloud: ${{ parameters.bff_use_sonarcloud }}
              sonarCloudOrganization: ${{ parameters.bff_sonar_cloud_organization }}
              sonarExtraProperties: ${{ parameters.bff_sonar_extra_properties }}

          # this code takes all the files in $(Build.ArtifactStagingDirectory) and uploads them as an artifact of your pipeline.
          - publish: "$(Build.ArtifactStagingDirectory)"
            artifact: "${{ parameters.artifactName }}"

  - ${{ if eq(parameters.buildAndPublishDockerImage, true) }}:
      - stage: docker_publish
        displayName: Create Docker Image
        jobs:
          - template: ../../jobs/build-docker-image/v1.yml
            parameters:
              dockerImageName: ${{ parameters.dockerImageName}}
              containerRegistryName: ${{ parameters.containerRegistryName }}
              artifactName: "${{ parameters.artifactName }}"
              artifactZipName: ${{ parameters.artifactZipName }}
              dockerFilePath: "${{ parameters.dockerFilePath }}"

  - ${{ if eq(parameters.updateHelmConfig, true) }}:
      - stage: updateHelmConfig
        displayName: Update Helm Config Repository
        dependsOn:
          - docker_publish
        jobs:
          - job: updateHelmConfigJob
            pool:
              name: Default
            workspace:
              clean: all
            steps:
              - template: ../../step_collections/process-cicd-script/v1.yml
                parameters:
                  repositoryResource: ${{ parameters.helmfileRepoName }}
                  branchName: $(Build.SourceBranch)
                  tagsCollection: ${{ parameters.imageTagVariableName }}=$(build.buildnumber)
                  commitMessage: Updated ${{ parameters.imageTagVariableName }} to $(build.buildnumber)
