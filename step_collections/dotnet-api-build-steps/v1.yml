parameters:
  # Build Parameters
  - name: buildConfiguration
    default: "Release"
    type: string
  - name: netCoreVersion
    type: string
    default: "5.0.x"
  - name: buildProject
    type: string

  # Publish Parameters
  - name: publishProject
    type: string

  # Test Parameters
  - name: executeTests
    type: boolean
    default: false
  - name: testProjects
    type: string
    default: "**/*tests/*.csproj"

  # SonarQube Parameters
  - name: executeSonar
    type: boolean
    default: false
  - name: sonarEndpointName
    type: string
    default: ""
  - name: sonarProjectKey
    type: string
    default: ""
  - name: sonarProjectName
    type: string
    default: ""
  - name: useSonarCloud
    type: boolean
    default: false
  - name: sonarCloudOrganization
    type: string
    default: ""
  - name: sonarExtraProperties
    type: string
    default: ""

  # Hooks
  - name: prebuildSteps
    type: stepList
    default: []
  - name: preTestSteps
    type: stepList
    default: []

steps:
  - task: UseDotNet@2
    displayName: "Use .NET Core sdk"
    inputs:
      packageType: sdk
      version: ${{ parameters.netCoreVersion }}

  - ${{ if eq(parameters.executeSonar, true) }}:
      - ${{ if eq(parameters.useSonarCloud, true) }}:
          - task: SonarCloudPrepare@1
            inputs:
              SonarCloud: ${{ parameters.sonarEndpointName }}
              organization: ${{ parameters.sonarCloudOrganization }}
              scannerMode: "MSBuild"
              projectKey: ${{ parameters.sonarProjectKey }}
              projectName: ${{ parameters.sonarProjectName }}
              extraProperties: |
                sonar.cs.opencover.reportsPaths="$(Agent.TempDirectory)/ResultFiles/coverage.opencover.xml"
                ${{ parameters.sonarExtraProperties }}
      - ${{ else }}:
          - task: SonarQubePrepare@5
            inputs:
              SonarQube: ${{ parameters.sonarEndpointName }}
              scannerMode: "MSBuild"
              projectKey: ${{ parameters.sonarProjectKey }}
              projectName: ${{ parameters.sonarProjectName }}
              extraProperties: |
                sonar.cs.opencover.reportsPaths="$(Agent.TempDirectory)/ResultFiles/coverage.opencover.xml"

  - ${{ parameters.prebuildSteps }}

  - task: DotNetCoreCLI@2
    displayName: "DotNet restore packages (dotnet restore)"
    inputs:
      command: "restore"
      feedsToUse: config
      nugetConfigPath: "$(Build.SourcesDirectory)/nuget.config"
      projects: "**/*.csproj"
      externalFeedCredentials: "SpydersoftDevelop"

  - task: DotNetCoreCLI@2
    displayName: Build (dotnet build)
    inputs:
      command: build
      projects: ${{ parameters.buildProject }}
      arguments: "--no-restore --configuration ${{ parameters.buildConfiguration }} /p:InformationalVersion=$(fullSemVer) /p:AssemblyVersion=$(AssemblySemVer) /p:AssemblyFileVersion=$(AssemblySemFileVer)"

  - ${{ if eq(parameters.executeTests, true) }}:
      - ${{ parameters.preTestSteps }}

      - task: DotNetCoreCLI@2
        displayName: Test (dotnet test)
        inputs:
          command: test
          projects: ${{ parameters.testProjects}}
          publishTestResults: false
          arguments: '--no-restore --configuration ${{ parameters.buildConfiguration }} --collect:"XPlat Code Coverage" --logger trx --results-directory "$(Agent.TempDirectory)"'

      - pwsh: |
          Push-Location $(Agent.TempDirectory);
          mkdir "ResultFiles";
          $resultFiles = Get-ChildItem -Directory -Filter resultfiles;

          $trxFile = Get-ChildItem *.trx;
          $trxFileName = [System.IO.Path]::GetFileNameWithoutExtension($trxFile);
                
          if (Test-Path $trxFilename) {      
            Push-Location $trxFilename;
            $coverageFiles = Get-ChildItem -Recurse -filter coverage.*.xml;
            foreach ($coverageFile in $coverageFiles) 
            {
              Copy-Item $coverageFile $resultFiles.FullName;
            }

            Pop-Location;
          }
        displayName: Copy Test Files

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: "VSTest"
          testResultsFiles: "$(Agent.TempDirectory)/*.trx"

      - task: PublishCodeCoverageResults@1
        condition: true # always try publish coverage results, even if unit tests fail
        inputs:
          codeCoverageTool: "cobertura"
          summaryFileLocation: "$(Agent.TempDirectory)/ResultFiles/**/coverage.cobertura.xml"

  - ${{ if eq(parameters.executeSonar, true) }}:
      - ${{ if eq(parameters.useSonarCloud, true) }}:
          - task: SonarCloudAnalyze@1
            inputs:
              jdkversion: "JAVA_HOME_17_X64"
          - task: SonarCloudPublish@1
            inputs:
              pollingTimeoutSec: "300"
      - ${{ else }}:
          - powershell: |
              $params = "$env:SONARQUBE_SCANNER_PARAMS" -replace '"sonar.branch.name":"[\w,/,-]*"\,?'
              Write-Host "##vso[task.setvariable variable=SONARQUBE_SCANNER_PARAMS]$params"
            displayName: Replace branch name
          - task: SonarQubeAnalyze@5
          - task: SonarQubePublish@5
            inputs:
              pollingTimeoutSec: "300"

  - task: DotNetCoreCLI@2
    displayName: Publish (dotnet publish)
    inputs:
      command: publish
      projects: ${{ parameters.publishProject }}
      arguments: "--no-restore --configuration ${{ parameters.buildConfiguration }} --output $(Build.ArtifactStagingDirectory) /p:InformationalVersion=$(fullSemVer) /p:AssemblyVersion=$(AssemblySemVer) /p:AssemblyFileVersion=$(AssemblySemFileVer)"
      zipAfterPublish: True
